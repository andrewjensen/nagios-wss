{"name":"nagios-wss","tagline":"A Nagios WAMP Router/Web Socket Monitoring Plugin","body":"nagios_wss\r\n==========\r\n\r\nA Nagios WAMP V1 and V2 Web Socket Monitoring Plugin\r\n-------------------------------------\r\n###Now supports WAMP protocol versions 1 and 2. Check out the [releases](https://github.com/camronlevanger/nagios-wss/releases) for more details.\r\n\r\nA Nagios NRPE script that allows you to monitor a web socket server using\r\nthe *WAMP V2* protocol. While it is fairly easy with Nagios to monitor whether\r\nor not your server proccess is running, unfortunately that can't tell us\r\nif that server is available and accepting connections.\r\n\r\nWith nagios-wss you can actually open a connection to your websocket servers and\r\nhave the confidence of knowing that they are responding correctly to your users.\r\n\r\nThis script is designed to be run on Nagios client servers using the NRPE daemon.\r\n\r\nFor more information on using Nagios and NRPE visit the following link:\r\n\r\n[http://nagios.sourceforge.net/docs/nrpe/](http://nagios.sourceforge.net/docs/nrpe/)\r\n\r\nInstallation and Usage (WAMP V2 specific, for V1 see [README.md in the v1.0.0 release](https://github.com/camronlevanger/nagios-wss/blob/v1.0.0/README.md))\r\n----------------------\r\n\r\n###Download and Install nagios-wss\r\n\r\n####Clone Source and Install Manually\r\nThis is a pretty simple option for this small codebase. We will clone the  source into\r\nthe directory where we want to keep our Nagios plugins, install the required libraries,\r\nand finally set proper permissions.\r\n\r\n\tcd /path/to/where/you/want/it\r\n\tgit clone git@github.com:camronlevanger/nagios-wss.git\r\n\tcd nagios-wss\r\n\tpip install -r requirements.txt\r\n\r\nThen restart the NRPE service, on Ubuntu that looks like:\r\n\r\n\tservice nagios-nrpe-server restart\r\n\r\n####Install Using Pip\r\nComing Soon(er or later)\r\n\r\n###Add nagios-wss Command to NRPE Client\r\nNow we need to edit our nrpe.cfg file and add our new plugin command.\r\n\r\n\tvim /etc/nagios/nrpe.cfg\r\n\r\nNow add the check_wss_conn command to the list.\r\n\r\n\t command[check_wss_conn]=/path/to/where/you/put/it/check_wss_conn.py\r\n\r\nBy default nagios-wss connects to wss://localhost:8080, if this works for your\r\nsetup then the above command config is all that is needed. If that does not reflect\r\nthe location of the socket server you need to monitor, you can also pass in the\r\nhost as an arg to the command.\r\n\r\nTo pass args to the command make sure you set in nrpe.cfg\r\n\r\n\tdont_blame_nrpe=1\r\n\r\n###Important arguments:\r\n\r\n+ -H host_uri | The url you use to connect to the socket server - This defaults to wss://localhost:8080/ws\r\n+ -R realm | The WAMP realm your server is listening on - defaults to realm1\r\n+ -T topic | The name of the topic you want the monitor to attempt subscribing to - defaults to notifications.1\r\n\r\n###Add nagios-wss to Nagios Checks on Your Nagios Monitoring Server\r\nDefine a new service for nagios-wss\r\n\r\n\tdefine service {\r\n\t\tuse\tgeneric-service (or your appropriate defined service)\r\n\t\thost_name\tname_of_your_client_host\r\n\t\tservice_description\tWeb Socket Server Monitor\r\n\t\tcheck_command\tcheck_wss_conn\r\n\t}\r\n\r\nResart the Nagios host.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}